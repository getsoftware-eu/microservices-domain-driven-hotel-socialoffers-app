services:
  postgres:
    container_name: postgres_db
    image: postgres
    environment:
#      POSTGRES_DB: keycloak
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      PGDATA: /data/postgres
    volumes:
      - postgres_data:/data/postgres
      - ./docker/postgres-init:/docker-entrypoint-initdb.d
#      - ./docker/postgres-init/01-init-keycloak.sql:/docker-entrypoint-initdb.d/01-init-keycloak.sql
    ports:
      - "5432:5432"
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 5s
      timeout: 5s
      retries: 10

#  pgadmin:
#    container_name: hotel_pgadmin
#    image: dpage/pgadmin4
#    environment:
#      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
#      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
#      PGADMIN_CONFIG_SERVER_MODE: 'False'
#    volumes:
#      - pgadmin_data:/var/lib/pgadmin
#    ports:
#      - "5050:80"
#    networks:
#      - app-network
#    restart: unless-stopped
  
  broker:
    image: apache/kafka:latest
    container_name: broker # from https://hub.docker.com/r/apache/kafka
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller               # The node acts as both broker and controller
      KAFKA_LISTENERS: PLAINTEXT://localhost:9092,CONTROLLER://localhost:9093  # Ports for broker and controller
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092                  # External listener for clients
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER         # Listener name for inter-controller communication
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT  # Security protocol for listeners
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9093    # Quorum voters for the controller in KRaft mode
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1           # Replication factor for the offsets topic
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1   # Replication factor for transaction logs
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1              # Minimum in-sync replicas for transactional logs
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0           # Initial delay before consumer group rebalancing
      KAFKA_NUM_PARTITIONS: 2                             # Default number of partitions for new topics
    ports:
      - "9092:9092"     # Port for Kafka broker
    networks:
      - app-network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "./opt/kafka/bin/kafka-broker-api-versions.sh --bootstrap-server localhost:9092 > /dev/null 2>&1",
        ]
      interval: 10s
      timeout: 10s
      retries: 5

  keycloak_web:
    image: quay.io/keycloak/keycloak:24.0
    container_name: keycloak_web
    command: start-dev
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      
      KC_DB: postgres  # Datenbanktyp
      KC_DB_URL: jdbc:postgresql://postgres_db:5432/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: keycloak
      
      KC_HOSTNAME: localhost
      KC_HOSTNAME_STRICT: false
      KC_HOSTNAME_STRICT_HTTPS: false

      KC_LOG_LEVEL: info
      KC_METRICS_ENABLED: true
      KC_HEALTH_ENABLED: true
    networks:
      - app-network
#      - keycloak-network
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "8089:8080"

  
#  zipkin:
#    image: openzipkin/zipkin
#    container_name: hotel_zipkin
#    ports:
#      - "9411:9411"
##   networks:
  #      - app-network

  hotel-server:
    image: eugenfff/hotel-server:1.0.0
    ports:
      - "8088:8080"
    environment:
      SPRING_PROFILES_ACTIVE: development
      SPRING_KAFKA_BOOTSTRAP_SERVERS: broker:9092 #,kafka2:19093,kafka3:19094
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres_db:5432/hotel
      SPRING_DATASOURCE_USERNAME: eu_user
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI: http://keycloak_web:8080/realms/hotel-socialoffers 
      #приложение работает как Resource Server
      SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_KEYCLOAK_ISSUER_URI: http://keycloak_web:8080/realms/hotel-socialoffers 
      #приложение само ходит в Keycloak как OAuth2 Client
    networks:
      - app-network
#      - keycloak-network
    depends_on:
        postgres:
          condition: service_healthy
        broker:
          condition: service_started        
        keycloak_web:
          condition: service_started
      
      
      #  hotel-chat:
#    image: eugenfff/hotel-service-chat:1.0.0
#    ports:
#      - "8081:8080"  
#    environment:
#      SPRING_KAFKA_BOOTSTRAP_SERVERS: broker:9092 #,kafka2:19093,kafka3:19094
#    depends_on:
#      - broker
#        networks:
#          - app-network
      
#  hotel-menu:
#    image: eugenfff/hotel-service-menu:1.0.0
#    ports:
#      - "8082:8080"
#    environment:
#      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka1:19092,kafka2:19093,kafka3:19094
#      depends_on:
#        - broker
#    networks:
#      - app-network

networks: #Когда использовать несколько networks? if нужно ограничить доступ между сервисами (например, hotel-server не должен видеть adminer)
  app-network:
    driver: bridge
#  keycloak-network:
#    driver: bridge
    
volumes:
  postgres_data:
#  pgadmin_data:
  #kafka1-data:
  #kafka2-data:
  #kafka3-data:
  
  
#  docker-compose up -d
#  ctrl + c //to stop
#  docker-compose stop
