<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>eu.getsoftware.hotelico</groupId>
	<artifactId>hotelservices</artifactId>
	<packaging>pom</packaging>
	<version>0.0.1-SNAPSHOT</version>
	
	<modules>
		<module>security-common</module>
		<module>shared-client-libs</module>
		<module>hotel-app</module>
		<module>hotel-service-chat</module>
		<module>hotel-service-menu</module>
    </modules>
	
	<name>social-hotel-interactions</name>
	<url>http://getSoftware.eu</url>

<!--	eu:OnlyVersionForChild pluginManagement: Управляет версиями Maven-плагинов для всех дочерних проектов. Если дочерний модуль использует эти плагины, он будет использовать версию из pluginManagement.-->

<!--	eu:includeForAllChild plugins: Используется для подключения Maven-плагинов, необходимых для выполнения задач (например, компиляции, тестирования).-->
	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<!--<spring.version>4.0.2.RELEASE</spring.version>-->
		<!--<mysql.connector.version>5.1.31</mysql.connector.version>-->
		<java.version>17</java.version>
		<compiler.plugin.version>3.8.1</compiler.plugin.version>
		<spring.boot.version>3.4.0</spring.boot.version>
		<kotlin.version>1.9.25</kotlin.version>
		<kotlin.compiler.jvmTarget>${java.version}</kotlin.compiler.jvmTarget>
		<spring.boot.maven.plugin.version>${spring.boot.version}</spring.boot.maven.plugin.version>
		<spring.boot.dependencies.version>${spring.boot.version}</spring.boot.dependencies.version>
		<!--		//schould be in bom dependency management automaticly-->
<!--		<spring.cloud-version>2023.0.3</spring.cloud-version>-->
		<!--		//schould be in bom dependency management automaticly-->
		<keycloak.version>21.1.1</keycloak.version> 
		<mapstruct.version>1.5.5.Final</mapstruct.version><!-- not in Spring BOM -->
		<aws.s3.version>2.5.5</aws.s3.version> 

		<maven.compiler.source>${java.version}</maven.compiler.source>
		<maven.compiler.target>${java.version}</maven.compiler.target>

		<lombok.version>1.18.30</lombok.version>

		<image>eugenfff/${project.artifactId}:${project.version}</image>
	
	</properties>
	
	<dependencyManagement>            
		<!-- Defining dependency versions for child POMs-->
		<dependencies>
			<dependency>
				<groupId>org.mapstruct</groupId>
				<artifactId>mapstruct</artifactId>
				<version>${mapstruct.version}</version>
			</dependency>
			<dependency>
<!--				eu: Spring Boot BOM подключен: управления версиями for child dependency под Spring: берут версии из Spring Boot BOM.-->
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-dependencies</artifactId>
				<version>${spring.boot.dependencies.version}</version>
				<scope>import</scope>
				<type>pom</type>
			</dependency>
<!--			<dependency>-->
<!--				<groupId>org.springframework.cloud</groupId>-->
<!--				<artifactId>spring-cloud-dependencies</artifactId>-->
<!--				<version>${spring.cloud-version}</version>-->
<!--				<type>pom</type>-->
<!--				<scope>import</scope>-->
<!--			</dependency>-->
<!--			<dependency>-->
<!--				<groupId>software.amazon.awssdk</groupId>-->
<!--				<artifactId>s3</artifactId>-->
<!--				<version>${aws.s3.version}</version>-->
<!--			</dependency>			-->
<!--			<dependency>-->
<!--				<groupId>software.amazon.awssdk</groupId>-->
<!--				<artifactId>auth</artifactId>-->
<!--				<version>${aws.s3.version}</version>-->
<!--			</dependency>-->
			<dependency>
				<groupId>org.keycloak.bom</groupId>
				<artifactId>keycloak-adapter-bom</artifactId>
				<version>${keycloak.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>
		
		<!-- автоматически будут у всех child modules, если ты их явно не отключишь -
 		don't add dependency here : if если они нужны НЕ во ВСЕХ child modules
 		Секция dependencies в дочерних POM используется для подключения библиотек. 
			Если версия указана в dependencyManagement родительского POM, 
			в дочерних модулях версию указывать не нужно.-->
		
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-validation</artifactId>
		</dependency>
<!--		<dependency> for Spring boot 2 : рекомендуется использовать стандартные инструменты Spring Security OAuth2 для работы с JWT-->
<!--			<groupId>org.keycloak</groupId>-->
<!--			<artifactId>keycloak-spring-boot-starter</artifactId>-->
<!--			<version>${keycloak.version}</version>-->
<!--		</dependency>-->
	
	</dependencies>

	<profiles>
		<profile>
			<id>build-all-docker-images</id>
			<build>
				<plugins>
					<plugin>
						<groupId>com.google.cloud.tools</groupId>
						<artifactId>jib-maven-plugin</artifactId>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
	
	
	<build>
	 
		<resources>
			<resource>
				<directory>${project.basedir}/src/main/resources</directory>
			</resource>
			<resource>
				<directory>${project.build.directory}/generated-resources</directory>
			</resource>
		</resources>
		<pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->
			<plugins>
				<plugin>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-maven-plugin</artifactId>
					<version>${spring.boot.maven.plugin.version}</version>
<!--					<configuration>--> <!--Need hier config layers or parent.pom???-->
<!--						<layers>-->
<!--							<enabled>true</enabled>-->
<!--						</layers>-->
<!--					</configuration>-->
					<executions>
						<execution>
							<goals>
								<goal>repackage</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>org.jetbrains.kotlin</groupId>
					<artifactId>kotlin-maven-plugin</artifactId>
					<version>${kotlin.version}</version> <!--from dependencyManagement: org.springframework.cloud
-->
					<configuration>
						<compilerPlugins>
							<!-- Or "spring" for the Spring support -->
							<!--<plugin>all-open</plugin>-->
							<plugin>spring</plugin>
						</compilerPlugins>

					</configuration>

					<executions>
						<execution>
							<id>compile</id>
							<goals> <goal>compile</goal> </goals>
							<configuration>
								<sourceDirs>
									<sourceDir>${project.basedir}/src/main/kotlin</sourceDir>
									<sourceDir>${project.basedir}/src/main/java</sourceDir>
								</sourceDirs>
							</configuration>
						</execution>
						<execution>
							<id>test-compile</id>
							<goals> <goal>test-compile</goal> </goals>
							<configuration>
								<sourceDirs>
									<sourceDir>${project.basedir}/src/test/kotlin</sourceDir>
									<sourceDir>${project.basedir}/src/test/java</sourceDir>
								</sourceDirs>
							</configuration>
						</execution>
					</executions>

					<dependencies>
						<dependency>
							<groupId>org.jetbrains.kotlin</groupId>
							<artifactId>kotlin-maven-allopen</artifactId>
							<version>${kotlin.version}</version>
						</dependency>
					</dependencies>

				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>${compiler.plugin.version}</version>
					<configuration>
						<source>${java.version}</source>
						<target>${java.version}</target>
						<annotationProcessorPaths>
							<annotationProcessorPath>
								<groupId>org.mapstruct</groupId>
								<artifactId>mapstruct-processor</artifactId>
								<version>${mapstruct.version}</version> <!-- Use the property here -->
							</annotationProcessorPath>
							<annotationProcessorPath>
								<groupId>org.projectlombok</groupId>
								<artifactId>lombok</artifactId>
								<version>${lombok.version}</version> <!-- или используй ту же версию, что в Spring Boot BOM -->
							</annotationProcessorPath>
						</annotationProcessorPaths>
					</configuration>
				</plugin>
				<plugin>
					<groupId>com.google.cloud.tools</groupId>
					<artifactId>jib-maven-plugin</artifactId>
					<version>3.1.4</version>
					<configuration>
						<from>
							<image>eclipse-temurin:17@sha256:2b47a8ea946ce1e5365a1562414ed576e378b7b670cadff3fb98ebecf2890cdc</image>
							<platforms>
								<platform>
									<architecture>arm64</architecture>
									<os>linux</os>
								</platform>
								<platform>
									<architecture>amd64</architecture>
									<os>linux</os>
								</platform>
							</platforms>
						</from>
						<to>
							<tags>
								<tag>latest</tag>
							</tags>
						</to>
					</configuration>
					<executions>
						<execution>
							<phase>package</phase>
							<goals>
								<goal>build</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
			</plugins>
		</pluginManagement>
		
		<plugins>
			<!-- Compilation -->
			<!--  Eugen #SUB modules have these plugins automaticly, they dont have to write this plugin in sub POM!! -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>${compiler.plugin.version}</version>
					<configuration>
						<source>${java.version}</source>
						<target>${java.version}</target>
					</configuration>
				</plugin>
			

			<!--make war with maven-->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<version>2.6</version>
				<configuration>
					<packagingExcludes>node_modules/**, grunt/**, img/**</packagingExcludes>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-clean-plugin</artifactId>
				<version>2.5</version>
				<configuration>
					<excludeDefaultDirectories>true</excludeDefaultDirectories>
					<retryOnError>true</retryOnError>
					<filesets>
						<fileset>
							<directory>target</directory>
							<includes>
								<include>**/*</include>
							</includes>
							<followSymlinks>false</followSymlinks>
						</fileset>
					</filesets>
				</configuration>
			</plugin>
			<!-- Frontend Plugin -->
			<plugin>
				<groupId>com.github.eirslett</groupId>
				<artifactId>frontend-maven-plugin</artifactId>
				<version>1.6</version>
				<executions>
					<!--<execution>
                        &lt;!&ndash; optional: you don't really need execution ids, but it looks nice
                                        in your build log. &ndash;&gt;
                        <id>install node and npm</id>
                        <goals>
                            <goal>install-node-and-npm</goal>
                        </goals>
                        &lt;!&ndash; optional: default phase is "generate-resources" &ndash;&gt;
                        <phase>package</phase>
                    </execution>
                    <execution>
                        <id>npm install</id>
                        <goals>
                            <goal>npm</goal>
                        </goals>
                        <phase>package</phase>
                        <configuration>
                            &lt;!&ndash; optional: The default argument is actually "install", so unless you
                                            need to run some other npm command, you can remove this whole <configuration>
                                            section. &ndash;&gt;
                            <arguments>install</arguments>
                        </configuration>
                    </execution>
                    <execution>
                        <id>npm-build-for-production</id>
                        <goals>
                            <goal>npm</goal>
                        </goals>
                        <phase>package</phase>
                        <configuration>
                            <arguments>run build:prod</arguments>
                        </configuration>
                    </execution>-->
				</executions>
				<configuration>
					<nodeVersion>v8.1.2</nodeVersion>
					<npmVersion>5.2.0</npmVersion>
					<workingDirectory>hotel-app/src/main/frontend</workingDirectory>
				</configuration>
			</plugin>
			<!-- /Frontend Plugin -->
		</plugins>
	</build>
	
	<repositories>
		<repository>
			<id>org.springframework.maven.milestone</id>
			<name>Spring Maven Milestone Repository</name>
			<url>https://repo.spring.io/milestone</url>
		</repository>
		<repository>
			<id>central</id>
			<url>https://repo.maven.apache.org/maven2</url>
		</repository>
		<repository>
			<id>spring-releases</id>
			<url>https://repo.spring.io/releases</url>
		</repository>
		<repository>
			<id>spring-snapshot</id>
			<url>https://repo.spring.io/snapshot</url>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
		</repository>
		<repository>
			<id>jaspersoft-third-party</id>
			<url>https://jaspersoft.jfrog.io/jaspersoft/third-party-ce-artifacts/</url>
		</repository>
	</repositories>
	<description>This application demonstrates how you can write real time applications using Spring 4 and AngularJS.</description>
</project>
