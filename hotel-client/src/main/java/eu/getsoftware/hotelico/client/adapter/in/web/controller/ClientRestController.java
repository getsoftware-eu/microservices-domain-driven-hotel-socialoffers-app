package eu.getsoftware.hotelico.client.adapter.in.web.controller;

import eu.getsoftware.hotelico.clients.api.application.dto.entity.CustomerDTO;
import org.springframework.security.oauth2.client.OAuth2AuthorizedClient;
import org.springframework.security.oauth2.client.annotation.RegisteredOAuth2AuthorizedClient;
import org.springframework.security.oauth2.client.web.reactive.function.client.ServletOAuth2AuthorizedClientExchangeFilterFunction;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.reactive.function.client.WebClient;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * eu: –í —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ–º –∫–ª–∏–µ–Ω—Ç–µ —è –ø—Ä–æ—Å—Ç–æ asynchron –≤—ã–ø–ª–µ–≤—ã–≤–∞—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ –º–µ—Ä–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è, —Å–∞–º –µ–≥–æ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—è.
 * —è –Ω–µ –º–æ–≥—É –∑–∞—Å—Ç–æ–ø–æ—Ä–∏—Ç—å thread –∏ —Å–¥–µ–ª–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ —Å CustomerDTO.
 */

@RestController
public class ClientRestController {
    private final WebClient webClient;

    public ClientRestController(WebClient client) {
        this.webClient = client;
    }

    @GetMapping("/")
    //–ú–µ—Ç–æ–¥ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç CustomerDTO –Ω–∞–ø—Ä—è–º—É—é, –∞ –æ–±–µ—â–∞–Ω–∏–µ, —á—Ç–æ –∫–æ–≥–¥–∞-—Ç–æ –æ–Ω –µ–≥–æ –≤–µ—Ä–Ω—ë—Ç (–∏–ª–∏ –æ—à–∏–±–∫—É).
    //Spring WebFlux —Å–∞–º –æ—Ç–ø—Ä–∞–≤–∏—Ç CustomerDTO –∫–∞–∫ JSON, –∫–æ–≥–¥–∞ Mono –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è.
    public Mono<CustomerDTO> callOneCustomer(@RegisteredOAuth2AuthorizedClient OAuth2AuthorizedClient auth) {
        return webClient.get()
                .uri("http://localhost:8088/api/customers/1")
                .attributes(ServletOAuth2AuthorizedClientExchangeFilterFunction.oauth2AuthorizedClient(auth)) 
                //–≠—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã WebClient –∑–Ω–∞–ª, –∫–∞–∫–æ–π Access_token –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å –≤ Authorization –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, Bearer <token>).
                //auth ‚Äî —ç—Ç–æ –æ–±—ä–µ–∫—Ç OAuth2AuthorizedClient, –∫–æ—Ç–æ—Ä—ã–π —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–∫–µ–Ω.
                .retrieve()
                .bodyToMono(CustomerDTO.class);
        //Mono: –Ω—É–∂–Ω–æ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ .subscribe(), .map(), .flatMap() –∏ —Ç.–ø.


    }

    @GetMapping("/all")
    //Flux<T> ‚Üí 0..N –æ–±—ä–µ–∫—Ç–æ–≤, –∫–∞–∫ List<T>, —Ç–æ–ª—å–∫–æ —Ä–µ–∞–∫—Ç–∏–≤–Ω—ã–π
    public Flux<CustomerDTO> getAllCustomers(OAuth2AuthorizedClient auth) {
        return webClient.get()
                .uri("http://localhost:8088/api/customers")
                .attributes(ServletOAuth2AuthorizedClientExchangeFilterFunction.oauth2AuthorizedClient(auth))
                .retrieve()
                .bodyToFlux(CustomerDTO.class); // üëà not Mono, but Flux
    }
}
